
// Function to check variation table display
function checkVariationTable(){
    if($("#variation-table tbody tr").length<=0)
        $("#variation-table").slideUp();
    else 
        $("#variation-table").slideDown();
        
}


// Function to add row in variation tab
function pushVariationRow(key, text){
    if(!$("input[name='key["+key+"]']").length)
    {
        text =  text.split(';');
        $("#variation-table tbody").append(`
            <tr>
                <td class='badge-span'>
                    <input type='hidden'  name='key[${key}]' >
                    <span class='badge'>${text[0]}</span>
                    ${(text[1])?"<span class='badge'>"+text[1]+"</span>":''}</span>
                    ${(text[2])?"<span class='badge'>"+text[2]+"</span>":''}</span>
                </td>
                <td>
                    <input type='number' step='0.01' val='0.01' min='0.01' max='99999.99' class='form-control isRequired vpriceinput' data-name='vprice' name='vprice[${key}]' required/>
                </td>
                <td>
                    <input type='number'step='0.01' val='0.01' min='0.01' max='9999.99' class='form-control vwidthinput' data-name='vwidth' name='vwidth[${key}]'/>
                </td>
                <td>
                    <input type='number' step='0.01' val='0.01' min='0.01' max='9999.99' class='form-control vlengthinput' data-name='vlength' name='vlength[${key}]'/>
                </td>
                <td>
                    <input type='number' step='0.01' val='0.01'  min='0.01' max='9999.99' class='form-control vheightinput' data-name='vheight' name='vheight[${key}]'/>
                </td>
                <td>
                    <input type='number' step='0.001' val='0.001' min='0.001' max='9999.999' class='form-control isRequired vweightinput' data-name='vweight' name='vweight[${key}]' required/>
                </td>
                <td class='stock-input'>
                    <input type='number' value='0' step='1' min='0' max='999999' class='form-control vstock_unitinput' data-name='vstock_unit' name='vstock_unit[${key}]' required/>
                </td>
                <td>
                    <input type="checkbox" class="switch custom-toggle disable-toggle" value='1' name="venable[${key}]" checked>
                </td>
            </tr>
        `); 
    }
    checkVariationTable();
    stockCheck('v', "#pills-variation");         
}

// Function to update vairaiton row
function updateVariationRow(originIndex = 0, originKey='', originText=''){   

    // Check if one of the variation row is empty 
    var check = true;
    $.each($('.variant-group'), function(i,v){
        if(!$('.badge',$(v)).length) check = false;
    })
    if(!check) return false;

    // Loop thorugh variant row and update variation option 
    var increment = parseInt(originIndex) +  1; 
    $.each($(".variant-group:eq("+originIndex+") .badge"), function (index, key){
        text = $(key).find('span').text();        
        key = "key" + originIndex + $(key).index() + $.trim(text).toLowerCase().replace(/\s/g, "");
        optionName = `option_value[${originIndex}][${key +"|"}]`;
        if(!$("input[name='"+optionName+"']").length)
            $('#variationBox').append(`<input type='hidden' class='variant-key' name='${optionName}' value='${text}' />`)
        if($(".variant-group:eq("+increment+") .badge").length>0){        
            updateVariationRow(increment, originKey +  key + "|", originText + text + ";");                               
        }
        else 
            pushVariationRow(originKey + key  + "|", originText + text);
    });
    removeVariationRow(originKey, true);
}


// Function to update variation row indexing
function updateVariationIndex(rowIndex, keyIndex){
    $.each($(".variant-group:eq("+rowIndex+") .badge"), function (index, key){
        if(index > keyIndex)
        {
            text = $.trim($(key).find('span').text()).toLowerCase().replace(/\s/g, "");        
            oldKey = "key" + rowIndex + index + text + "|" ;
            newIndex = parseInt(index)-1;
            newKey = "key" + rowIndex + newIndex + text + "|" ;
            $.each($( "[name*='"+oldKey +"']" ), function(i, k){
                var name = $(k).attr('name');                    
                $(k).attr('name', name.replace(oldKey, newKey));
            })
        }
    });
}


// Function to remove vairaiton row
function removeVariationRow(key, fullKey = false, withUpdate = true){
    if(key){
        if(!fullKey)
        {
            key = $.trim(key).toLowerCase().replace(/\s/g, "") ;
            $( "input[name='"+key + "']" ).remove();
            $( ".badge-span input[name*='"+key + "|" +"']" ).parent().parent().remove();
            if(withUpdate)  updateVariationRow();       
        }
        else 
            $( "input[name='key["+key+"]']" ).parentsUntil('tr').parent().remove();
    }
}


(function ($) {
  'use strict';

  $.fn.tagsInput = function (options) {
    const settings = $.extend({
      tagClass: 'badge badge-primary',
      tagsContainerClass: 'form-control',
      highlightColor: '#ffc107'
    }, options);

    const ATTR_RENDERED = 'data-rendered';
    const ATTR_DISABLED = 'disabled';
    const TRUE = 'true';
    const helpers = new Helpers();
    const tagRemoveIconTemplate = '<i class="tag-remove">&#10006;</i>';
    const tagTemplate = function(isDisabled) {
      return helpers.fillIn('<div class="tag {tagClass}"><span>{value}</span>{tagRemoveIcon}</div>', {
        'tagClass' : helpers.sanitizeText(settings.tagClass),
        'tagRemoveIcon' : isDisabled? '' : tagRemoveIconTemplate
      });
    }
    const tagsContainerTemplate = function(isDisabled) {
      return helpers.fillIn('<div class="tags-container {tagsContainerClass} {state}"><input type="text" size="1" {state}><div>', {
        'tagsContainerClass' : helpers.sanitizeText(settings.tagsContainerClass),
        'state' : isDisabled? 'disabled' : ''
      });
    }

    /** Render TagsInput elements */
    this.each(function () {
      if (this.hasAttribute(ATTR_RENDERED)) {
        return;
      }

      const isDisabled = this.hasAttribute(ATTR_DISABLED);
      const tTag = tagTemplate(isDisabled);
      const tTagsContainer = tagsContainerTemplate(isDisabled);

      const $that = $(this);
      const tagElems = [];
      const hiddenValue = $that.val();
      if (hiddenValue) {
        $.each(hiddenValue.split(';'), function (index, value) {
          const v = value.trim();
          if (v.length > 0) {
            tagElems.unshift(jQuery(tTag.replace('{value}', v)));
          }
        });
      }

      const tagsContainerElem = $(tTagsContainer);
      $.each(tagElems, function (index, value) {
        tagsContainerElem.prepend(value);
      });
      $that.after(tagsContainerElem);
      $that.attr('hidden', TRUE);
      $that.attr(ATTR_RENDERED, TRUE);
      
      
    });

    /** Register events */
    $(document).on('click','i.tag-remove' , helpers.removeTag)

    $('.tags-container').not('disabled').click(function (e) {
      $(this).children('input').focus();
    });

    $('.tags-container').not('disabled').children('input').bind('input', function (e) {
      helpers.resetSize(this);
    });

    const activeTagTemplate = tagTemplate(false);
    $('.tags-container').not('disabled').children('input').keydown(function (e) {  
      var regex =  /[!@#$%^&*()_+=\[\]{};':"\\|,.<>\/?]+/;
      if (e.key === 'Enter' || regex.test(e.key)) {
          

        // Check if more than 30 variation option 
        var parentIndex = $(this).parentsUntil('.variant-group').parent().index();
        var countLimit = 1;
        $.each($('.variant-group'), function(i, v){
            var num = $('.badge', $(v)).length; 
            if(i == parentIndex)
                num++;
            countLimit *= num;
        })
        if(countLimit > 30){
            swal('',maxVariant + ' 30', 'warning');
            return false;
        }

        e.preventDefault();
        const input = $(e.currentTarget);
        let value = input.val().trim();
        if (value) {
          value = helpers.sanitizeText(value);
          let checkValue = $.trim(value).toLowerCase().replace(/\s/g, "");
          const existingSpan = input.siblings('div').filter(function () {
            return ($.trim($(this).find('span').text()).toLowerCase().replace(/\s/g, "") === checkValue);
          });
          if (existingSpan.length > 0) {
            if (!settings.hasOwnProperty('tagColor')) {
              settings.tagColor = existingSpan.css('background-color');
            }
            helpers.blink(existingSpan, settings.highlightColor, settings.tagColor);
          } else {
            const newTag = $(activeTagTemplate.replace('{value}', value));
            newTag.insertBefore(input);
            newTag.children('i').click(helpers.removeTag);

            const hiddenInput = $(this).parent().prev();
            let oValue = hiddenInput.val();
            if (oValue.length > 0 && oValue.charAt(oValue.length - 1) != ';') {
              oValue += ';';
            }
            input.val('');
            helpers.resetSize(input);
            hiddenInput.val(oValue.concat(value).concat(';'));
              updateVariationRow();
          }
        }
      
        return false;
      }
    });
  }

  /*** Helper functions declaration ***/
  function Helpers() {}

  Helpers.prototype.resetSize = function (target) {
    const $target = $(target);
    const len = $target.val().length;
    $target.attr('size', (len < 1) ? 1 : len);
  }

  Helpers.prototype.removeTag = function (e) {

    const $that = $(this);
    const parent = $that.parent();
    const hiddenInput = parent.parent().prev();
    const text = $that.siblings('span').text();
    const hValue = hiddenInput.val();
    const pattern =  `(^${text};)|(;${text};)`;
    // const result = hValue.replace(new RegExp(pattern, 'u'), ';');
    const result = hValue;
    hiddenInput.val(result);
    var rowIndex =  parent.parentsUntil(".variant-group").parent().index();
    var keyIndex = parent.index() ;
    var key = "key" + rowIndex + keyIndex + text;
    var key2 =  "option_value[" + rowIndex + "]" + "[key" + rowIndex + keyIndex + text + "|]";
    if(rowIndex!==null && rowIndex>=0) updateVariationIndex(rowIndex, keyIndex);
    parent.remove();
    removeVariationRow(key, false, true);
    removeVariationRow(key2, false, true);
    
  }

  Helpers.prototype.sanitizeText = function (raw) {
    return $('<div>').text(raw).html();
  }

  Helpers.prototype.blink = function (target, highlightColor, tagColor) {
    const $target = $(target);
    $target.stop().animate({
      backgroundColor: highlightColor
    }, 200).promise().done(function () {
      $target.animate({
        backgroundColor: tagColor
      }, 200);
    });
  }

  Helpers.prototype.fillIn = function(stringTemplate, variables) {
    return stringTemplate.replace(new RegExp("\{([^\{]+)\}", "g"), function(_unused, varName){
        return variables[varName] === undefined? '{'.concat(varName).concat('}') : variables[varName];
    });
}

})(jQuery);